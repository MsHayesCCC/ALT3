# The birthday problem
# Statement of the problem, reason for model - https://en.wikipedia.org/wiki/Birthday_problem


import datetime, random   # Import the Datetime and random modules

def getBirthdays(numberOfBirthdays):    # Function with parameter of user inputted number of birthdays to generate our list of random birthdates
    birthdays=[]                        # Create empty list to store the random birthdays we generate
    for i in range(numberOfBirthdays):  
        startOfYear=datetime.date(2021,1,1)      # Setting a date to use as the start point for generating differenet birth dates
        randomNumberOfDays=datetime.timedelta(random.randint(0,364)) # Randomly choosing a number of days that we will add to our startdate.
        birthday=startOfYear+randomNumberOfDays  # Adding the number of days generated by the variable randomNumberOfDays to the startOfYear date
        birthdays.append(birthday)               # Add the date generated to the birthday list.
    return(birthdays)                            # return the list to the call in the main program

def getMatch(birthdays):                # Function with parameter being our list of random birthdates.
    #if len(birthdays)==len(set(birthdays)):
     #   return None

# You might recognise this algorithm from 5th year?
    for a,birthdayA in enumerate(birthdays):  # iterating through the birthdays list
        for b,birthdayB in enumerate(birthdays[a+1:]): # iterating through the birthdays list one index ahead of birthdayA
            if birthdayA == birthdayB:  # Comparing birthday A and B
                return birthdayA        # Return the duplicate value

print('THe Birthday Paradox')

MONTHS=('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')  # Creating a tuple (think of an unchangeable list) to hold the months of the year - https://www.w3schools.com/python/python_tuples.asp

while True:  # Using a while loop to validate the user input for number of birthdays they generate.
    response=int(input('How many birthdays will i generate? (Max 100)'))
    if (0<response<=100):
        numBDays=response
        break

print() # Just a space to make program easier to read.

print('Here are the',numBDays,'randomly generated birthdays:')
birthdays=getBirthdays(numBDays) # Calling our function with the argument numBDays which is our input value for number of birthdays to generate.

# This loop just formats how we the user will see the list of birthdays randomly generated.
for i,birthday in enumerate(birthdays):
    # birthday variable here is an actual date from the birthdays list, it is in the format 2021-09-13, year-month-day
    if i!=0:     # This if statement jsut makes sure that the list of dates doesnt start with a ,
        print(',',end='')
    monthName=MONTHS[birthday.month-1]  # Getting the month name from the tuple of all the month names, using -1 as remember the tuple starts at 0, so if birthday.month was 12 then we would be out of range in the list as it goes 0-11.
    dateText='{} {}'.format(monthName, birthday.day) # Formatting the variable dateText so its easier to read.
    print(dateText, end='')

print() # Just a space to make program easier to read.
print() # Just a space to make program easier to read.

match=getMatch(birthdays)   # Call on the function with the argument being our list of birthdays
print('In this simulation, ', end='')

# Using conditions to tell the user if there has or hasnt been any matching birthdates
if match != None:
    monthName = MONTHS[match.month - 1]
    dateText = '{} {}'.format(monthName, match.day)
    print('multiple people have a birthday on', dateText)
else:
    print('there are no matching birthdays.')
print()


print('Generating', numBDays, 'random birthdays 100,000 times...')
input('Press Enter to begin...')

print('Let\'s run another 100,000 simulations.')
simMatch = 0  # How many simulations had matching birthdays in them.
for i in range(100_000):
    if i % 10_000 == 0:
        print(i, 'simulations run...')
    birthdays = getBirthdays(numBDays)
    if getMatch(birthdays) != None:
        simMatch = simMatch + 1
print('100,000 simulations run.')

probability = round(simMatch / 100_000 * 100, 2)
print('Out of 100,000 simulations of', numBDays, 'people, there was a')
print('matching birthday in that group', simMatch, 'times. This means')
print('that', numBDays, 'people have a', probability, '% chance of')
print('having a matching birthday in their group.')
print('That\'s probably more than you would think!')
